/*
 * CooksCorner API
 * API for managing recipes, users, and authentication in CooksCorner.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthenticationRequest;
import org.openapitools.client.model.AuthenticationResponse;
import java.io.File;
import org.openapitools.client.model.Ingredient;
import org.openapitools.client.model.Recipe;
import org.openapitools.client.model.RecipeResponseDTO;
import org.openapitools.client.model.RegisterRequest;
import java.util.UUID;
import org.openapitools.client.model.UserResponseDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Activate a user account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authActivateGetTest() throws ApiException {
        String token = null;
        String response = api.authActivateGet(token);
        // TODO: test validations
    }

    /**
     * Authenticate a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authAuthenticatePostTest() throws ApiException {
        AuthenticationRequest authenticationRequest = null;
        AuthenticationResponse response = api.authAuthenticatePost(authenticationRequest);
        // TODO: test validations
    }

    /**
     * Register a new user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRegisterPostTest() throws ApiException {
        RegisterRequest registerRequest = null;
        AuthenticationResponse response = api.authRegisterPost(registerRequest);
        // TODO: test validations
    }

    /**
     * Request a password reset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authResetPasswordPostTest() throws ApiException {
        String email = null;
        String response = api.authResetPasswordPost(email);
        // TODO: test validations
    }

    /**
     * Update user bio
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUpdateBioPostTest() throws ApiException {
        String bio = null;
        UUID id = null;
        String response = api.authUpdateBioPost(bio, id);
        // TODO: test validations
    }

    /**
     * Update user profile image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUpdateImagePostTest() throws ApiException {
        File image = null;
        UUID id = null;
        String response = api.authUpdateImagePost(image, id);
        // TODO: test validations
    }

    /**
     * Update user password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authUpdatePasswordPostTest() throws ApiException {
        String token = null;
        String password = null;
        String response = api.authUpdatePasswordPost(token, password);
        // TODO: test validations
    }

    /**
     * Get a specific user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetTest() throws ApiException {
        UUID id = null;
        UserResponseDTO response = api.idGet(id);
        // TODO: test validations
    }

    /**
     * Follow a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostTest() throws ApiException {
        UUID id = null;
        UUID userId = null;
        UserResponseDTO response = api.idPost(id, userId);
        // TODO: test validations
    }

    /**
     * Get recipes by category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeCategoryGetTest() throws ApiException {
        String id = null;
        List<Recipe> response = api.recipeCategoryGet(id);
        // TODO: test validations
    }

    /**
     * Get all recipes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeGetTest() throws ApiException {
        List<Recipe> response = api.recipeGet();
        // TODO: test validations
    }

    /**
     * Get a specific recipe
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeIdGetTest() throws ApiException {
        UUID id = null;
        RecipeResponseDTO response = api.recipeIdGet(id);
        // TODO: test validations
    }

    /**
     * Add a new recipe
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipePostTest() throws ApiException {
        String name = null;
        String description = null;
        String difficulty = null;
        String category = null;
        String preparationTime = null;
        List<Ingredient> listOfIngredients = null;
        File image = null;
        UUID response = api.recipePost(name, description, difficulty, category, preparationTime, listOfIngredients, image);
        // TODO: test validations
    }

}
