/*
 * CooksCorner API
 * API for managing recipes, users, and authentication in CooksCorner.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Recipe;
import org.openapitools.client.model.Role;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-13T21:27:43.073776+06:00[Asia/Almaty]")
public class User {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_RECIPES = "recipes";
  @SerializedName(SERIALIZED_NAME_RECIPES)
  private List<Recipe> recipes = null;

  public static final String SERIALIZED_NAME_SAVED_RECIPES = "savedRecipes";
  @SerializedName(SERIALIZED_NAME_SAVED_RECIPES)
  private List<Recipe> savedRecipes = null;

  public static final String SERIALIZED_NAME_FOLLOWERS = "followers";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS)
  private List<User> followers = null;

  public static final String SERIALIZED_NAME_FOLLOWING = "following";
  @SerializedName(SERIALIZED_NAME_FOLLOWING)
  private List<User> following = null;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private Role role;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ACTIVATION_TOKEN = "activationToken";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_TOKEN)
  private String activationToken;

  public static final String SERIALIZED_NAME_PASSWORD_RESET_TOKEN = "passwordResetToken";
  @SerializedName(SERIALIZED_NAME_PASSWORD_RESET_TOKEN)
  private String passwordResetToken;

  public User() {
  }

  public User id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public User username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public User email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public User password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public User imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * Get imageUrl
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public User bio(String bio) {
    
    this.bio = bio;
    return this;
  }

   /**
   * Get bio
   * @return bio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBio() {
    return bio;
  }


  public void setBio(String bio) {
    this.bio = bio;
  }


  public User recipes(List<Recipe> recipes) {
    
    this.recipes = recipes;
    return this;
  }

  public User addRecipesItem(Recipe recipesItem) {
    if (this.recipes == null) {
      this.recipes = new ArrayList<>();
    }
    this.recipes.add(recipesItem);
    return this;
  }

   /**
   * Get recipes
   * @return recipes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Recipe> getRecipes() {
    return recipes;
  }


  public void setRecipes(List<Recipe> recipes) {
    this.recipes = recipes;
  }


  public User savedRecipes(List<Recipe> savedRecipes) {
    
    this.savedRecipes = savedRecipes;
    return this;
  }

  public User addSavedRecipesItem(Recipe savedRecipesItem) {
    if (this.savedRecipes == null) {
      this.savedRecipes = new ArrayList<>();
    }
    this.savedRecipes.add(savedRecipesItem);
    return this;
  }

   /**
   * Get savedRecipes
   * @return savedRecipes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Recipe> getSavedRecipes() {
    return savedRecipes;
  }


  public void setSavedRecipes(List<Recipe> savedRecipes) {
    this.savedRecipes = savedRecipes;
  }


  public User followers(List<User> followers) {
    
    this.followers = followers;
    return this;
  }

  public User addFollowersItem(User followersItem) {
    if (this.followers == null) {
      this.followers = new ArrayList<>();
    }
    this.followers.add(followersItem);
    return this;
  }

   /**
   * Get followers
   * @return followers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<User> getFollowers() {
    return followers;
  }


  public void setFollowers(List<User> followers) {
    this.followers = followers;
  }


  public User following(List<User> following) {
    
    this.following = following;
    return this;
  }

  public User addFollowingItem(User followingItem) {
    if (this.following == null) {
      this.following = new ArrayList<>();
    }
    this.following.add(followingItem);
    return this;
  }

   /**
   * Get following
   * @return following
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<User> getFollowing() {
    return following;
  }


  public void setFollowing(List<User> following) {
    this.following = following;
  }


  public User role(Role role) {
    
    this.role = role;
    return this;
  }

   /**
   * Get role
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Role getRole() {
    return role;
  }


  public void setRole(Role role) {
    this.role = role;
  }


  public User enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public User activationToken(String activationToken) {
    
    this.activationToken = activationToken;
    return this;
  }

   /**
   * Get activationToken
   * @return activationToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getActivationToken() {
    return activationToken;
  }


  public void setActivationToken(String activationToken) {
    this.activationToken = activationToken;
  }


  public User passwordResetToken(String passwordResetToken) {
    
    this.passwordResetToken = passwordResetToken;
    return this;
  }

   /**
   * Get passwordResetToken
   * @return passwordResetToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPasswordResetToken() {
    return passwordResetToken;
  }


  public void setPasswordResetToken(String passwordResetToken) {
    this.passwordResetToken = passwordResetToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.username, user.username) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.password, user.password) &&
        Objects.equals(this.imageUrl, user.imageUrl) &&
        Objects.equals(this.bio, user.bio) &&
        Objects.equals(this.recipes, user.recipes) &&
        Objects.equals(this.savedRecipes, user.savedRecipes) &&
        Objects.equals(this.followers, user.followers) &&
        Objects.equals(this.following, user.following) &&
        Objects.equals(this.role, user.role) &&
        Objects.equals(this.enabled, user.enabled) &&
        Objects.equals(this.activationToken, user.activationToken) &&
        Objects.equals(this.passwordResetToken, user.passwordResetToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, email, password, imageUrl, bio, recipes, savedRecipes, followers, following, role, enabled, activationToken, passwordResetToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    recipes: ").append(toIndentedString(recipes)).append("\n");
    sb.append("    savedRecipes: ").append(toIndentedString(savedRecipes)).append("\n");
    sb.append("    followers: ").append(toIndentedString(followers)).append("\n");
    sb.append("    following: ").append(toIndentedString(following)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    activationToken: ").append(toIndentedString(activationToken)).append("\n");
    sb.append("    passwordResetToken: ").append(toIndentedString(passwordResetToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("username");
    openapiFields.add("email");
    openapiFields.add("password");
    openapiFields.add("imageUrl");
    openapiFields.add("bio");
    openapiFields.add("recipes");
    openapiFields.add("savedRecipes");
    openapiFields.add("followers");
    openapiFields.add("following");
    openapiFields.add("role");
    openapiFields.add("enabled");
    openapiFields.add("activationToken");
    openapiFields.add("passwordResetToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to User
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (User.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if (jsonObj.get("recipes") != null && !jsonObj.get("recipes").isJsonNull()) {
        JsonArray jsonArrayrecipes = jsonObj.getAsJsonArray("recipes");
        if (jsonArrayrecipes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipes` to be an array in the JSON string but got `%s`", jsonObj.get("recipes").toString()));
          }

          // validate the optional field `recipes` (array)
          for (int i = 0; i < jsonArrayrecipes.size(); i++) {
            Recipe.validateJsonObject(jsonArrayrecipes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("savedRecipes") != null && !jsonObj.get("savedRecipes").isJsonNull()) {
        JsonArray jsonArraysavedRecipes = jsonObj.getAsJsonArray("savedRecipes");
        if (jsonArraysavedRecipes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("savedRecipes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `savedRecipes` to be an array in the JSON string but got `%s`", jsonObj.get("savedRecipes").toString()));
          }

          // validate the optional field `savedRecipes` (array)
          for (int i = 0; i < jsonArraysavedRecipes.size(); i++) {
            Recipe.validateJsonObject(jsonArraysavedRecipes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("followers") != null && !jsonObj.get("followers").isJsonNull()) {
        JsonArray jsonArrayfollowers = jsonObj.getAsJsonArray("followers");
        if (jsonArrayfollowers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("followers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `followers` to be an array in the JSON string but got `%s`", jsonObj.get("followers").toString()));
          }

          // validate the optional field `followers` (array)
          for (int i = 0; i < jsonArrayfollowers.size(); i++) {
            User.validateJsonObject(jsonArrayfollowers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("following") != null && !jsonObj.get("following").isJsonNull()) {
        JsonArray jsonArrayfollowing = jsonObj.getAsJsonArray("following");
        if (jsonArrayfollowing != null) {
          // ensure the json data is an array
          if (!jsonObj.get("following").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `following` to be an array in the JSON string but got `%s`", jsonObj.get("following").toString()));
          }

          // validate the optional field `following` (array)
          for (int i = 0; i < jsonArrayfollowing.size(); i++) {
            User.validateJsonObject(jsonArrayfollowing.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("activationToken") != null && !jsonObj.get("activationToken").isJsonNull()) && !jsonObj.get("activationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activationToken").toString()));
      }
      if ((jsonObj.get("passwordResetToken") != null && !jsonObj.get("passwordResetToken").isJsonNull()) && !jsonObj.get("passwordResetToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordResetToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordResetToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of User given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of User
  * @throws IOException if the JSON string is invalid with respect to User
  */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

 /**
  * Convert an instance of User to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

